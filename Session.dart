import 'dart:io';

abstract class Network {
    
    void connection(sessionId);     /** ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ */
    void disconnect();              /** ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ */
    bool isInSession();             /** ‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Session ‡∏£‡∏∂‡πÄ‡∏õ‡∏•‡πà‡∏≤ */
    String getCurrentSession();     /** ‡∏î‡∏∂‡∏á session ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô */

}


mixin Session {

    void debugWorld() => print('[Debug World] ${worldBridge}'); /** ‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡∏î‡∏π‡∏Ñ‡πà‡∏≤ World ‡∏ß‡πà‡∏≤‡∏°‡∏µ Server ‡πÅ‡∏•‡∏∞ User ‡πÑ‡∏´‡∏ô‡πÉ‡∏ô Server ‡∏ï‡πà‡∏≤‡∏á‡πÜ‡∏î‡πâ‡∏ß‡∏¢ */

    void debug(info, isRefreshScreen){ // Debug ‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡∏ï‡∏≠‡∏ô‡∏ó‡∏≥‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á

        if(isRefreshScreen) print("\x1B[2J\x1B[0;0H"); // ‡∏´‡∏≤‡∏Å isRefreshScreen == true then ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠

        print('[ Information ] $info'); // print [ Information ] ‡∏ï‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢ ‡∏Ñ‡πà‡∏≤ debug ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÇ‡∏¢‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô function ‡πÄ‡∏õ‡πá‡∏ô text

    }

    void _leaveSession(sessionId, user){ /** Leave Session ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ô‡∏±‡πâ‡∏ô‡πÜ */
        
        var _newSessionData = []; // ‡∏™‡∏£‡πâ‡∏≤‡∏á List ‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡πÄ‡∏Å‡πá‡∏ö User
        
        for(var userInSession in worldBridge[sessionId]){ // Loop ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤ List ‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô User ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Leave ‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ

            if(userInSession != user){ // condition ‡∏´‡∏≤‡∏Å user ‡∏ó‡∏µ‡πà‡∏à‡∏∞ leave ‡∏≠‡∏≠‡∏Å ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö user ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô List ‡πÉ‡∏´‡∏°‡πà

                _newSessionData.add(userInSession);

            }

        }

        if(_newSessionData.length < 1){ /** ‡∏´‡∏≤‡∏Å Session ‡∏ô‡∏±‡πâ‡∏ô‡πÜ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏±‡∏ô‡∏à‡∏∞‡∏•‡∏ö‡∏ó‡∏¥‡πâ‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ = null */

            worldBridge.remove(sessionId);

        }else{ /** ‡∏´‡∏≤‡∏Å Session ‡∏ô‡∏±‡πâ‡∏ô‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ñ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πá‡∏à‡∏∞‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏ß‡πâ‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏ô‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏•‡∏∞‡πÄ‡∏ã‡πá‡∏ó‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏≤‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà leave ‡∏≠‡∏≠‡∏Å */

            worldBridge[sessionId] = _newSessionData;

        }

        debug('‚ùå Leaved Session - (üåê ${sessionId}):(üí¨ ${user}) .', true); /** ‡∏î‡∏π‡∏Ñ‡πà‡∏≤ Session World */

    }


    bool _joinSession(sessionId, user, currentSession){ /** ‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ Join Session */

        if(_isDuplicateConnectSession(sessionId, currentSession)) return false;  // ‡∏î‡∏±‡∏Å‡∏Å‡∏≤‡∏£ join session ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô session ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÜ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏∂‡πÄ‡∏õ‡∏•‡πà‡∏≤

        if(_isSessionValid(sessionId)){ // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ Session ‡∏ô‡∏±‡πâ‡∏ô‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∂‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏∞‡∏™‡πà‡∏á User ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            _addToSession(sessionId, user);
            return true;
        }

        /** ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ Session ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡πâ‡∏£‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞ ‡πÄ‡∏û‡∏¥‡πà‡∏° User ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô Session ‡∏ô‡∏±‡πâ‡∏ô‡πÜ */ 
        worldBridge[sessionId] = [user];

        return true;
    }

    void _addToSession(sessionId, user){ /** ‡πÄ‡∏û‡∏¥‡πà‡∏° User ‡πÄ‡∏Ç‡πâ‡∏≤ Session */

        var _newSessionData = []; // ‡∏™‡∏£‡πâ‡∏≤‡∏á List ‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡πÄ‡∏Å‡πá‡∏ö User

        for(var _user in worldBridge[sessionId]){ // Loop ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° User ‡πÄ‡∏Ç‡πâ‡∏≤ List ‡πÉ‡∏´‡∏°‡πà
            _newSessionData.add(_user);
        }

        _newSessionData.add(user); // ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ user ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ function ‡∏ô‡∏µ‡πâ

        worldBridge[sessionId] = _newSessionData; // Set ‡πÉ‡∏´‡πâ Session ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    }

    bool _isDuplicateConnectSession(sessionId, requireSession){ /** ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏≠‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏£‡∏∂‡πÄ‡∏õ‡∏•‡πà‡∏≤ */

        bool _isDuppling = sessionId == requireSession; // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏≠‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏£‡∏∂‡πÄ‡∏õ‡∏•‡πà‡∏≤ session ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ join == session ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏∂‡πÄ‡∏õ‡∏•‡πà‡∏≤

        if(_isDuppling) debug('‚ö†Ô∏è  Already in Session - (üåê ${sessionId})', true);  // debug ‡∏î‡∏π‡∏´‡∏≤‡∏Å‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö session ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß

        return _isDuppling; // return ‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô bool -> true(‡∏ã‡πâ‡∏≠‡∏ô) - false(‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≠‡∏ô)

    }

    bool _isSessionValid(sessionId){ /** Session ‡∏ô‡∏±‡πâ‡∏ô‡πÜ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏á‡∏ï‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∂‡πÄ‡∏õ‡∏•‡πà‡∏≤ */
        return worldBridge[sessionId] != null; // Session == null (false) - Session != null (true)  
    }

}


class User extends Network with Session {

    /**
     *  _user = ‡∏ä‡∏∑‡πà‡∏≠ User
     *  _currentSession = Session ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ì‡∏ï‡∏≠‡∏ô‡∏ô‡∏±‡πâ‡∏ô [ none = ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Session ‡πÉ‡∏î‡πÜ ]
     */
    var _user, _currentSession = 'none';

    /** My constructer :D */
    User(this._user);

    
    void connection(sessionId){ /** Connetion ... */

        if(_joinSession(sessionId, this._user, this.getCurrentSession())){
            this._currentSession = sessionId;
            debug("‚úîÔ∏è  Joined Session - (üåê ${this._currentSession}):(üí¨ ${this._user}) ." , true);

            debugWorld(); /** ‡∏î‡∏π‡∏Ñ‡πà‡∏≤ Session World */
        }

    }

    void disconnect(){ /** Disconnect ... */

        if(!this.isInSession()) return debug('Your not in any Session (üí¨${this._user})', true);

        _leaveSession(this.getCurrentSession(), this._user);

        debugWorld(); /** ‡∏î‡∏π‡∏Ñ‡πà‡∏≤ Session World */

        this._currentSession = 'none';
    }


    bool isInSession() => this.getCurrentSession() != 'none'; // Session ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ì‡∏ï‡∏≠‡∏ô‡∏ô‡∏±‡πâ‡∏ô [ none = ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Session ‡πÉ‡∏î‡πÜ ]
    String getUsername() => this._user; // Getter ‡∏ä‡∏∑‡πà‡∏≠ user
    String getCurrentSession() => this._currentSession; // Getter Session ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
    String getUserInformation() => 'üí¨  ${this._user}'; // Getter ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á User

}




/** Main System *//** Main System *//** Main System *//** Main System *//** Main System *//** Main System */
/** Main System *//** Main System *//** Main System *//** Main System *//** Main System *//** Main System */

    final worldBridge = {}; /** ‡∏Ñ‡πà‡∏≤‡πÇ‡∏•‡∏Å‡∏Ç‡∏≠‡∏á Session */
    final userList = []; /** ‡∏Ñ‡πà‡∏≤ UserList ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô */

    void flushScreen(){
        return print("\x1B[2J\x1B[0;0H");
    }

    String getInformationUserList(){
        var str = '';
        for(var user in userList){
            str += '${user.getUserInformation()}\n   ';
        }
        return str;
    }

    String getInformationWorld(){
        var str = '';
        worldBridge.forEach((k, v){
            str += 'üåê  ${k}\n   ';
            for(var user in v){
                str += '   üí¨  ${user}\n   ';
            }
        });

        return str;
    }

    void createUser(){
        flushScreen();

        print('/* Creating User */');

        stdout.write('Username: ');
        var user = stdin.readLineSync();

        if(user == ''){
            return createUser();
        }

        userList.add(User(user));

        return mainLoop();
    }   

    User getUser(user){
        
        for(var _user in userList){
            if(_user.getUsername() == user){
                return _user;
            }
        }
        return User('null');
    }

    bool isValidUser(user){

        for(var _user in userList){
            if(_user.getUsername() == user){
                return true;
            }
        }

        return false;
    }


    void testJoinSessionMenu(user){
        flushScreen();

        stdout.write("[ Attention ] If you type nothings it's will be return back to control user.\nüí¨  ${user.getUsername()} - Join Session ? : ");
        var sessionId = stdin.readLineSync();

        if(sessionId == ''){
            return controlUser(user);
        }
        user.disconnect();
        user.connection(sessionId);
        return controlUser(user);
    }

    void testLeaveSessionMenu(user){
        flushScreen();
        
        stdout.write("[ Attention ] If you type nothings it's will be return back to control user.\nüí¨  ${user.getUsername()} - (Yes / nothings) ? : ");
        var decided = stdin.readLineSync();

        if(decided == ''){
            return controlUser(user);
        }

        user.disconnect();
        return controlUser(user);
    }

    void controlUser(user){
        flushScreen();

        print('/* Controling üí¨  ${user.getUsername()} */\n\n   ${getInformationWorld()}\n\n1.Join Session\n2.Leave Session\n3.Back to Test Session\n');

        stdout.write("Choose : ");
        var selection = stdin.readLineSync();

        if(selection == '1'){
            return testJoinSessionMenu(user);
        }else if(selection == '2'){
            return testLeaveSessionMenu(user);
        }else if(selection == '3'){
            return testSession();
        }else{
            return controlUser(user);
        }
    }

    void testSession(){
        flushScreen();

        print('/* Test Session */\n\n   ${getInformationWorld()}\n\n/* UserList */\n   ${getInformationUserList()}\n\nNothings - Back to main menu\n');

        stdout.write("Choose User Control By 'Name' : ");
        var user = stdin.readLineSync();

        if (user == ''){
            return mainLoop();

        }else if(isValidUser(user)){

            return controlUser(getUser(user));

        }else{
            
            flushScreen();
            print('‚ùå  Not found User : ${user}');

            stdin.readLineSync();
            return testSession();
        }

    }

    void mainLoop(){
        flushScreen();

        print('/* Network Session Simulator */\n   1.Create User\n   2.Test Session\n   3.Exit\n\n   ${getInformationUserList()}');
        
        stdout.write("Choose : ");
        var selection = stdin.readLineSync();

        if(selection == '1'){
            return createUser();
        }else if(selection == '2'){
            return testSession();
        }else if(selection == '3'){
            flushScreen();
            print('Exited Network Simmulator.');
            return;
        }else{
            return mainLoop(); 
        }
    }

/** Main System *//** Main System *//** Main System *//** Main System *//** Main System *//** Main System */
/** Main System *//** Main System *//** Main System *//** Main System *//** Main System *//** Main System */



/** Main Program */
main() => mainLoop();
/** Main Program */